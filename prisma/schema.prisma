datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  password      String?
  accounts      Account[]
  sessions      Session[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Test         Test[]
  TaskProgress TaskProgress[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Language {
  id           Int           @id @default(autoincrement())
  name         String        @unique // e.g., "English", "Spanish"
  code         String        @unique // e.g., "en", "es"
  grammarRules GrammarRule[]
  Task         Task[]
}

model LanguageLevel {
  id          Int     @id @default(autoincrement())
  level       String  @unique // e.g., "A1", "A2", "B1", "B2"
  description String?
  tasks       Task[]
}

model GrammarRule {
  id          Int      @id @default(autoincrement())
  data        Json     // Includes title, description, and example in multiple languages
  languageId  Int
  language    Language @relation(fields: [languageId], references: [id])
  tasks Task[]
}


model TaskType {
  id    Int    @id @default(autoincrement())
  name  String @unique // e.g., "test", "fill-in-the-blank", "connections"
  tasks Task[]
}

model TaskPurpose {
  id    Int    @id @default(autoincrement())
  name  String @unique // e.g., "grammar", "vocabulary", "reading", "listening"
  tasks Task[]
}

model TaskTopic {
  id    Int    @id @default(autoincrement())
  name  String @unique // e.g., "travel", "medicine", "business"
  tasks Task[]
}

model Task {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  languageId      Int
  language        Language       @relation(fields: [languageId], references: [id])
  taskTypeId      Int
  taskType        TaskType       @relation(fields: [taskTypeId], references: [id])
  taskPurposeId   Int
  taskPurpose     TaskPurpose    @relation(fields: [taskPurposeId], references: [id])
  taskTopicId     Int?
  taskTopic       TaskTopic?     @relation(fields: [taskTopicId], references: [id])
  languageLevelId Int
  languageLevel   LanguageLevel  @relation(fields: [languageLevelId], references: [id])
  grammarRuleId   Int?
  grammarRule     GrammarRule?   @relation(fields: [grammarRuleId], references: [id])
  data            Json           // Store type-specific details as JSON
  TaskProgress    TaskProgress[]
}

model Test {
  id          String    @id @default(cuid())
  userId      String // Reference to the User model
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  status      String // 'in-progress' | 'completed'
  totalTasks  Int // Total tasks in the test
  progress    Float // Percentage completed (aggregated from tasks)
  score       Float? // Aggregated score of the test
  user        User      @relation(fields: [userId], references: [id])
}

model TaskProgress {
  id          String    @id @default(cuid())
  userId      String // Reference to the User model
  taskId      Int // Reference to the Task model
  status      String // 'not-started' | 'in-progress' | 'completed'
  tries       Int       @default(0) // Number of attempts for this task
  score       Float     @default(0) // Average score across attempts
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId]) // Ensure one record per user-task pair
}
